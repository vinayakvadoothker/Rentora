{"ast":null,"code":"import \"../chunk-3W5G4CYI.js\";\nimport { parsePublishableKey } from \"@clerk/shared/keys\";\nimport { loadScript } from \"@clerk/shared/loadScript\";\nimport { isValidProxyUrl, proxyUrlToAbsoluteURL } from \"@clerk/shared/proxy\";\nimport { addClerkPrefix } from \"@clerk/shared/url\";\nimport { errorThrower } from \"./errorThrower\";\nimport { isDevOrStagingUrl } from \"./isDevOrStageUrl\";\nimport { versionSelector } from \"./versionSelector\";\nconst FAILED_TO_LOAD_ERROR = \"Clerk: Failed to load Clerk\";\nconst loadClerkJsScript = opts => {\n  const {\n    frontendApi,\n    publishableKey\n  } = opts;\n  if (!publishableKey && !frontendApi) {\n    errorThrower.throwMissingPublishableKeyError();\n  }\n  return loadScript(clerkJsScriptUrl(opts), {\n    async: true,\n    crossOrigin: \"anonymous\",\n    beforeLoad: applyClerkJsScriptAttributes(opts)\n  }).catch(() => {\n    throw new Error(FAILED_TO_LOAD_ERROR);\n  });\n};\nconst clerkJsScriptUrl = opts => {\n  var _parsePublishableKey;\n  const {\n    clerkJSUrl,\n    clerkJSVariant,\n    clerkJSVersion,\n    proxyUrl,\n    domain,\n    publishableKey,\n    frontendApi\n  } = opts;\n  if (clerkJSUrl) {\n    return clerkJSUrl;\n  }\n  let scriptHost = \"\";\n  if (!!proxyUrl && isValidProxyUrl(proxyUrl)) {\n    scriptHost = proxyUrlToAbsoluteURL(proxyUrl).replace(/http(s)?:\\/\\//, \"\");\n  } else if (domain && !isDevOrStagingUrl(((_parsePublishableKey = parsePublishableKey(publishableKey)) === null || _parsePublishableKey === void 0 ? void 0 : _parsePublishableKey.frontendApi) || frontendApi || \"\")) {\n    scriptHost = addClerkPrefix(domain);\n  } else {\n    var _parsePublishableKey2;\n    scriptHost = ((_parsePublishableKey2 = parsePublishableKey(publishableKey)) === null || _parsePublishableKey2 === void 0 ? void 0 : _parsePublishableKey2.frontendApi) || frontendApi || \"\";\n  }\n  const variant = clerkJSVariant ? \"\".concat(clerkJSVariant.replace(/\\.+$/, \"\"), \".\") : \"\";\n  const version = versionSelector(clerkJSVersion);\n  return \"https://\".concat(scriptHost, \"/npm/@clerk/clerk-js@\").concat(version, \"/dist/clerk.\").concat(variant, \"browser.js\");\n};\nconst applyClerkJsScriptAttributes = options => script => {\n  const {\n    publishableKey,\n    frontendApi,\n    proxyUrl,\n    domain\n  } = options;\n  if (publishableKey) {\n    script.setAttribute(\"data-clerk-publishable-key\", publishableKey);\n  } else if (frontendApi) {\n    script.setAttribute(\"data-clerk-frontend-api\", frontendApi);\n  }\n  if (proxyUrl) {\n    script.setAttribute(\"data-clerk-proxy-url\", proxyUrl);\n  }\n  if (domain) {\n    script.setAttribute(\"data-clerk-domain\", domain);\n  }\n};\nexport { loadClerkJsScript };","map":{"version":3,"names":["parsePublishableKey","loadScript","isValidProxyUrl","proxyUrlToAbsoluteURL","addClerkPrefix","errorThrower","isDevOrStagingUrl","versionSelector","FAILED_TO_LOAD_ERROR","loadClerkJsScript","opts","frontendApi","publishableKey","throwMissingPublishableKeyError","clerkJsScriptUrl","async","crossOrigin","beforeLoad","applyClerkJsScriptAttributes","catch","Error","_parsePublishableKey","clerkJSUrl","clerkJSVariant","clerkJSVersion","proxyUrl","domain","scriptHost","replace","_parsePublishableKey2","variant","concat","version","options","script","setAttribute"],"sources":["/Users/vvadooth/Documents/GitHub/Rentora/rentora-website/node_modules/@clerk/clerk-react/src/utils/loadClerkJsScript.ts"],"sourcesContent":["import { parsePublishableKey } from '@clerk/shared/keys';\nimport { loadScript } from '@clerk/shared/loadScript';\nimport { isValidProxyUrl, proxyUrlToAbsoluteURL } from '@clerk/shared/proxy';\nimport { addClerkPrefix } from '@clerk/shared/url';\n\nimport type { IsomorphicClerkOptions } from '../types';\nimport { errorThrower } from './errorThrower';\nimport { isDevOrStagingUrl } from './isDevOrStageUrl';\nimport { versionSelector } from './versionSelector';\n\nconst FAILED_TO_LOAD_ERROR = 'Clerk: Failed to load Clerk';\n\ntype LoadClerkJsScriptOptions = Omit<IsomorphicClerkOptions, 'proxyUrl' | 'domain'> & {\n  proxyUrl: string;\n  domain: string;\n};\n\nexport const loadClerkJsScript = (opts: LoadClerkJsScriptOptions) => {\n  const { frontendApi, publishableKey } = opts;\n\n  if (!publishableKey && !frontendApi) {\n    errorThrower.throwMissingPublishableKeyError();\n  }\n\n  return loadScript(clerkJsScriptUrl(opts), {\n    async: true,\n    crossOrigin: 'anonymous',\n    beforeLoad: applyClerkJsScriptAttributes(opts),\n  }).catch(() => {\n    throw new Error(FAILED_TO_LOAD_ERROR);\n  });\n};\n\nconst clerkJsScriptUrl = (opts: LoadClerkJsScriptOptions) => {\n  const { clerkJSUrl, clerkJSVariant, clerkJSVersion, proxyUrl, domain, publishableKey, frontendApi } = opts;\n\n  if (clerkJSUrl) {\n    return clerkJSUrl;\n  }\n\n  let scriptHost = '';\n  if (!!proxyUrl && isValidProxyUrl(proxyUrl)) {\n    scriptHost = proxyUrlToAbsoluteURL(proxyUrl).replace(/http(s)?:\\/\\//, '');\n  } else if (domain && !isDevOrStagingUrl(parsePublishableKey(publishableKey)?.frontendApi || frontendApi || '')) {\n    scriptHost = addClerkPrefix(domain);\n  } else {\n    scriptHost = parsePublishableKey(publishableKey)?.frontendApi || frontendApi || '';\n  }\n\n  const variant = clerkJSVariant ? `${clerkJSVariant.replace(/\\.+$/, '')}.` : '';\n  const version = versionSelector(clerkJSVersion);\n  return `https://${scriptHost}/npm/@clerk/clerk-js@${version}/dist/clerk.${variant}browser.js`;\n};\n\nconst applyClerkJsScriptAttributes = (options: LoadClerkJsScriptOptions) => (script: HTMLScriptElement) => {\n  const { publishableKey, frontendApi, proxyUrl, domain } = options;\n  if (publishableKey) {\n    script.setAttribute('data-clerk-publishable-key', publishableKey);\n  } else if (frontendApi) {\n    script.setAttribute('data-clerk-frontend-api', frontendApi);\n  }\n\n  if (proxyUrl) {\n    script.setAttribute('data-clerk-proxy-url', proxyUrl);\n  }\n\n  if (domain) {\n    script.setAttribute('data-clerk-domain', domain);\n  }\n};\n"],"mappings":";AAAA,SAASA,mBAAA,QAA2B;AACpC,SAASC,UAAA,QAAkB;AAC3B,SAASC,eAAA,EAAiBC,qBAAA,QAA6B;AACvD,SAASC,cAAA,QAAsB;AAG/B,SAASC,YAAA,QAAoB;AAC7B,SAASC,iBAAA,QAAyB;AAClC,SAASC,eAAA,QAAuB;AAEhC,MAAMC,oBAAA,GAAuB;AAOtB,MAAMC,iBAAA,GAAqBC,IAAA,IAAmC;EACnE,MAAM;IAAEC,WAAA;IAAaC;EAAe,IAAIF,IAAA;EAExC,IAAI,CAACE,cAAA,IAAkB,CAACD,WAAA,EAAa;IACnCN,YAAA,CAAaQ,+BAAA,CAAgC;EAC/C;EAEA,OAAOZ,UAAA,CAAWa,gBAAA,CAAiBJ,IAAI,GAAG;IACxCK,KAAA,EAAO;IACPC,WAAA,EAAa;IACbC,UAAA,EAAYC,4BAAA,CAA6BR,IAAI;EAC/C,CAAC,EAAES,KAAA,CAAM,MAAM;IACb,MAAM,IAAIC,KAAA,CAAMZ,oBAAoB;EACtC,CAAC;AACH;AAEA,MAAMM,gBAAA,GAAoBJ,IAAA,IAAmC;EAAA,IAAAW,oBAAA;EAC3D,MAAM;IAAEC,UAAA;IAAYC,cAAA;IAAgBC,cAAA;IAAgBC,QAAA;IAAUC,MAAA;IAAQd,cAAA;IAAgBD;EAAY,IAAID,IAAA;EAEtG,IAAIY,UAAA,EAAY;IACd,OAAOA,UAAA;EACT;EAEA,IAAIK,UAAA,GAAa;EACjB,IAAI,CAAC,CAACF,QAAA,IAAYvB,eAAA,CAAgBuB,QAAQ,GAAG;IAC3CE,UAAA,GAAaxB,qBAAA,CAAsBsB,QAAQ,EAAEG,OAAA,CAAQ,iBAAiB,EAAE;EAC1E,WAAWF,MAAA,IAAU,CAACpB,iBAAA,CAAkB,EAAAe,oBAAA,GAAArB,mBAAA,CAAoBY,cAAc,eAAAS,oBAAA,uBAAlCA,oBAAA,CAAqCV,WAAA,KAAeA,WAAA,IAAe,EAAE,GAAG;IAC9GgB,UAAA,GAAavB,cAAA,CAAesB,MAAM;EACpC,OAAO;IAAA,IAAAG,qBAAA;IACLF,UAAA,GAAa,EAAAE,qBAAA,GAAA7B,mBAAA,CAAoBY,cAAc,eAAAiB,qBAAA,uBAAlCA,qBAAA,CAAqClB,WAAA,KAAeA,WAAA,IAAe;EAClF;EAEA,MAAMmB,OAAA,GAAUP,cAAA,MAAAQ,MAAA,CAAoBR,cAAA,CAAeK,OAAA,CAAQ,QAAQ,EAAE,CAAC,SAAM;EAC5E,MAAMI,OAAA,GAAUzB,eAAA,CAAgBiB,cAAc;EAC9C,kBAAAO,MAAA,CAAkBJ,UAAU,2BAAAI,MAAA,CAAwBC,OAAO,kBAAAD,MAAA,CAAeD,OAAO;AACnF;AAEA,MAAMZ,4BAAA,GAAgCe,OAAA,IAAuCC,MAAA,IAA8B;EACzG,MAAM;IAAEtB,cAAA;IAAgBD,WAAA;IAAac,QAAA;IAAUC;EAAO,IAAIO,OAAA;EAC1D,IAAIrB,cAAA,EAAgB;IAClBsB,MAAA,CAAOC,YAAA,CAAa,8BAA8BvB,cAAc;EAClE,WAAWD,WAAA,EAAa;IACtBuB,MAAA,CAAOC,YAAA,CAAa,2BAA2BxB,WAAW;EAC5D;EAEA,IAAIc,QAAA,EAAU;IACZS,MAAA,CAAOC,YAAA,CAAa,wBAAwBV,QAAQ;EACtD;EAEA,IAAIC,MAAA,EAAQ;IACVQ,MAAA,CAAOC,YAAA,CAAa,qBAAqBT,MAAM;EACjD;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}